{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { v1 as uuid } from \"uuid\";\n\n/** Custom hook for flipping a card. Returns [isFacingUp, flipCardFn] */\nfunction useFlip() {\n  _s();\n  const [isFacingUp, setIsFacingUp] = useState(true);\n  const flipCard = () => {\n    setIsFacingUp(isUp => !isUp);\n  };\n  return [isFacingUp, flipCard];\n}\n\n/** Custom hook for fetching and storing API responses.\n * Accepts a baseUrl and returns:\n * - an array of response data\n * - a function to append new data from the API\n */\n_s(useFlip, \"MAa1uxaU8Uj1WEqjPNN6CqCOgcw=\");\nfunction useAxios(baseUrl, formatFn = data => data) {\n  _s2();\n  const [responses, setResponses] = useState([]);\n\n  /** Adds new data from a GET request to (baseUrl + urlSuffix) */\n  const addResponseData = async (urlSuffix = \"\") => {\n    const response = await axios.get(`${baseUrl}${urlSuffix}`);\n    const formattedData = formatFn(response.data);\n    setResponses(data => [...data, {\n      ...formattedData,\n      id: uuid()\n    }]);\n  };\n\n  /** Clear the response array */\n  const clearResponses = () => setResponses([]);\n  return [responses, addResponseData, clearResponses];\n}\n_s2(useAxios, \"vMQZFOHJbpBfbx+C6jBQHAS5iO4=\");\nexport { useFlip, useAxios };","map":{"version":3,"names":["useState","axios","v1","uuid","useFlip","_s","isFacingUp","setIsFacingUp","flipCard","isUp","useAxios","baseUrl","formatFn","data","_s2","responses","setResponses","addResponseData","urlSuffix","response","get","formattedData","id","clearResponses"],"sources":["/home/megan/react-cards-pokemon/src/hooks.js"],"sourcesContent":["import { useState } from \"react\";\nimport axios from \"axios\";\nimport { v1 as uuid } from \"uuid\";\n\n/** Custom hook for flipping a card. Returns [isFacingUp, flipCardFn] */\nfunction useFlip() {\n  const [isFacingUp, setIsFacingUp] = useState(true);\n  const flipCard = () => {\n    setIsFacingUp(isUp => !isUp);\n  };\n  return [isFacingUp, flipCard];\n}\n\n/** Custom hook for fetching and storing API responses.\n * Accepts a baseUrl and returns:\n * - an array of response data\n * - a function to append new data from the API\n */\nfunction useAxios(baseUrl, formatFn = data => data) {\n  const [responses, setResponses] = useState([]);\n\n  /** Adds new data from a GET request to (baseUrl + urlSuffix) */\n  const addResponseData = async (urlSuffix = \"\") => {\n    const response = await axios.get(`${baseUrl}${urlSuffix}`);\n    const formattedData = formatFn(response.data);\n    setResponses(data => [...data, { ...formattedData, id: uuid() }]);\n  };\n\n  /** Clear the response array */\n  const clearResponses = () => setResponses([]);\n\n  return [responses, addResponseData, clearResponses];\n}\n\nexport { useFlip, useAxios };"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAEjC;AACA,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;IACrBD,aAAa,CAACE,IAAI,IAAI,CAACA,IAAI,CAAC;EAC9B,CAAC;EACD,OAAO,CAACH,UAAU,EAAEE,QAAQ,CAAC;AAC/B;;AAEA;AACA;AACA;AACA;AACA;AAJAH,EAAA,CARSD,OAAO;AAahB,SAASM,QAAQA,CAACC,OAAO,EAAEC,QAAQ,GAAGC,IAAI,IAAIA,IAAI,EAAE;EAAAC,GAAA;EAClD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMiB,eAAe,GAAG,MAAAA,CAAOC,SAAS,GAAG,EAAE,KAAK;IAChD,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,GAAGT,OAAO,GAAGO,SAAS,EAAE,CAAC;IAC1D,MAAMG,aAAa,GAAGT,QAAQ,CAACO,QAAQ,CAACN,IAAI,CAAC;IAC7CG,YAAY,CAACH,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAE,GAAGQ,aAAa;MAAEC,EAAE,EAAEnB,IAAI,CAAC;IAAE,CAAC,CAAC,CAAC;EACnE,CAAC;;EAED;EACA,MAAMoB,cAAc,GAAGA,CAAA,KAAMP,YAAY,CAAC,EAAE,CAAC;EAE7C,OAAO,CAACD,SAAS,EAAEE,eAAe,EAAEM,cAAc,CAAC;AACrD;AAACT,GAAA,CAdQJ,QAAQ;AAgBjB,SAASN,OAAO,EAAEM,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}