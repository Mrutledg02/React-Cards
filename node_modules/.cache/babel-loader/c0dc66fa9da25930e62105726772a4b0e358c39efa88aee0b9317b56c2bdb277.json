{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { v1 as uuid } from \"uuid\";\n\n/** Custom hook for flipping a card. Returns [isFacingUp, flipCardFn] */\nfunction useFlip() {\n  _s();\n  const [isFacingUp, setIsFacingUp] = useState(true);\n  const flipCard = () => {\n    setIsFacingUp(isUp => !isUp);\n  };\n  return [isFacingUp, flipCard];\n}\n\n/** useLocalStorage: Syncs state with localStorage */\n_s(useFlip, \"MAa1uxaU8Uj1WEqjPNN6CqCOgcw=\");\nfunction useLocalStorage(key, initialValue) {\n  _s2();\n  // On first load, check localStorage or use initialValue\n  const [storedValue, setStoredValue] = useState(() => {\n    const item = window.localStorage.getItem(key);\n    return item !== null ? JSON.parse(item) : initialValue;\n  });\n\n  // Anytime storedValue changes, update localStorage\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n  return [storedValue, setStoredValue];\n}\n\n/** Custom hook for fetching and storing API responses.\n * Accepts a baseUrl and returns:\n * - an array of response data\n * - a function to append new data from the API\n */\n_s2(useLocalStorage, \"KUApk3NE+Pd3cZp3W3fN6VqTaEU=\");\nfunction useAxios(baseUrl, formatFn = data => data, storageKey = \"data\") {\n  _s3();\n  const [responses, setResponses] = useLocalStorage(storageKey, []);\n  const addResponseData = async (urlSuffix = \"\") => {\n    const response = await axios.get(`${baseUrl}${urlSuffix}`);\n    const formattedData = formatFn(response.data);\n    setResponses(data => [...data, {\n      ...formattedData,\n      id: uuid()\n    }]);\n  };\n  const clearResponses = () => setResponses([]);\n  return [responses, addResponseData, clearResponses];\n}\n_s3(useAxios, \"LeqIBh0NyjOqfE3JJ/xUPGYAqSA=\", false, function () {\n  return [useLocalStorage];\n});\nexport { useFlip, useAxios, useLocalStorage };","map":{"version":3,"names":["useState","useEffect","axios","v1","uuid","useFlip","_s","isFacingUp","setIsFacingUp","flipCard","isUp","useLocalStorage","key","initialValue","_s2","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","setItem","stringify","useAxios","baseUrl","formatFn","data","storageKey","_s3","responses","setResponses","addResponseData","urlSuffix","response","get","formattedData","id","clearResponses"],"sources":["/home/megan/react-cards-pokemon/src/hooks.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { v1 as uuid } from \"uuid\";\n\n/** Custom hook for flipping a card. Returns [isFacingUp, flipCardFn] */\nfunction useFlip() {\n  const [isFacingUp, setIsFacingUp] = useState(true);\n  const flipCard = () => {\n    setIsFacingUp(isUp => !isUp);\n  };\n  return [isFacingUp, flipCard];\n}\n\n/** useLocalStorage: Syncs state with localStorage */\nfunction useLocalStorage(key, initialValue) {\n  // On first load, check localStorage or use initialValue\n  const [storedValue, setStoredValue] = useState(() => {\n    const item = window.localStorage.getItem(key);\n    return item !== null ? JSON.parse(item) : initialValue;\n  });\n\n  // Anytime storedValue changes, update localStorage\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(storedValue));\n  }, [key, storedValue]);\n\n  return [storedValue, setStoredValue];\n}\n\n/** Custom hook for fetching and storing API responses.\n * Accepts a baseUrl and returns:\n * - an array of response data\n * - a function to append new data from the API\n */\nfunction useAxios(baseUrl, formatFn = data => data, storageKey = \"data\") {\n  const [responses, setResponses] = useLocalStorage(storageKey, []);\n\n  const addResponseData = async (urlSuffix = \"\") => {\n    const response = await axios.get(`${baseUrl}${urlSuffix}`);\n    const formattedData = formatFn(response.data);\n    setResponses(data => [...data, { ...formattedData, id: uuid() }]);\n  };\n\n  const clearResponses = () => setResponses([]);\n\n  return [responses, addResponseData, clearResponses];\n}\n\nexport { useFlip, useAxios, useLocalStorage };"],"mappings":";;;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAEjC;AACA,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAMS,QAAQ,GAAGA,CAAA,KAAM;IACrBD,aAAa,CAACE,IAAI,IAAI,CAACA,IAAI,CAAC;EAC9B,CAAC;EACD,OAAO,CAACH,UAAU,EAAEE,QAAQ,CAAC;AAC/B;;AAEA;AAAAH,EAAA,CARSD,OAAO;AAShB,SAASM,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,GAAA;EAC1C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IACnD,MAAMiB,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;IAC7C,OAAOK,IAAI,KAAK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;EACxD,CAAC,CAAC;;EAEF;EACAZ,SAAS,CAAC,MAAM;IACdiB,MAAM,CAACC,YAAY,CAACI,OAAO,CAACX,GAAG,EAAES,IAAI,CAACG,SAAS,CAACT,WAAW,CAAC,CAAC;EAC/D,CAAC,EAAE,CAACH,GAAG,EAAEG,WAAW,CAAC,CAAC;EAEtB,OAAO,CAACA,WAAW,EAAEC,cAAc,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AAJAF,GAAA,CAfSH,eAAe;AAoBxB,SAASc,QAAQA,CAACC,OAAO,EAAEC,QAAQ,GAAGC,IAAI,IAAIA,IAAI,EAAEC,UAAU,GAAG,MAAM,EAAE;EAAAC,GAAA;EACvE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrB,eAAe,CAACkB,UAAU,EAAE,EAAE,CAAC;EAEjE,MAAMI,eAAe,GAAG,MAAAA,CAAOC,SAAS,GAAG,EAAE,KAAK;IAChD,MAAMC,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAAC,GAAGV,OAAO,GAAGQ,SAAS,EAAE,CAAC;IAC1D,MAAMG,aAAa,GAAGV,QAAQ,CAACQ,QAAQ,CAACP,IAAI,CAAC;IAC7CI,YAAY,CAACJ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAE,GAAGS,aAAa;MAAEC,EAAE,EAAElC,IAAI,CAAC;IAAE,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,MAAMmC,cAAc,GAAGA,CAAA,KAAMP,YAAY,CAAC,EAAE,CAAC;EAE7C,OAAO,CAACD,SAAS,EAAEE,eAAe,EAAEM,cAAc,CAAC;AACrD;AAACT,GAAA,CAZQL,QAAQ;EAAA,QACmBd,eAAe;AAAA;AAanD,SAASN,OAAO,EAAEoB,QAAQ,EAAEd,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}